# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from const_msg/dsp_to_pc.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class dsp_to_pc(genpy.Message):
  _md5sum = "d5bfc4d9d173fac3e9f429b7263af1d7"
  _type = "const_msg/dsp_to_pc"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Header Header
int32 XDist
int32 YDist
float32 fAngle
int16 Vx
int16 Vy
int16 dw
uint8 RecData_State
 
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['Header','XDist','YDist','fAngle','Vx','Vy','dw','RecData_State']
  _slot_types = ['std_msgs/Header','int32','int32','float32','int16','int16','int16','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Header,XDist,YDist,fAngle,Vx,Vy,dw,RecData_State

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dsp_to_pc, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      if self.XDist is None:
        self.XDist = 0
      if self.YDist is None:
        self.YDist = 0
      if self.fAngle is None:
        self.fAngle = 0.
      if self.Vx is None:
        self.Vx = 0
      if self.Vy is None:
        self.Vy = 0
      if self.dw is None:
        self.dw = 0
      if self.RecData_State is None:
        self.RecData_State = 0
    else:
      self.Header = std_msgs.msg.Header()
      self.XDist = 0
      self.YDist = 0
      self.fAngle = 0.
      self.Vx = 0
      self.Vy = 0
      self.dw = 0
      self.RecData_State = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if3hB().pack(_x.XDist, _x.YDist, _x.fAngle, _x.Vx, _x.Vy, _x.dw, _x.RecData_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.XDist, _x.YDist, _x.fAngle, _x.Vx, _x.Vy, _x.dw, _x.RecData_State,) = _get_struct_2if3hB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs))
      _x = self.Header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2if3hB().pack(_x.XDist, _x.YDist, _x.fAngle, _x.Vx, _x.Vy, _x.dw, _x.RecData_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.Header is None:
        self.Header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Header.seq, _x.Header.stamp.secs, _x.Header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Header.frame_id = str[start:end].decode('utf-8')
      else:
        self.Header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.XDist, _x.YDist, _x.fAngle, _x.Vx, _x.Vy, _x.dw, _x.RecData_State,) = _get_struct_2if3hB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2if3hB = None
def _get_struct_2if3hB():
    global _struct_2if3hB
    if _struct_2if3hB is None:
        _struct_2if3hB = struct.Struct("<2if3hB")
    return _struct_2if3hB
